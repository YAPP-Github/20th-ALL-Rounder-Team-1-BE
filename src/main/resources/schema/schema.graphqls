schema {
	query: Query
}

type Query {
	weekand(customField: String): Weekand!
	checkDuplicateNickname(nickname: String!): Boolean!
	user(id: ID!): User
	followers(page: Int!, size: Int!): FollowerList!
	followees(page: Int!, size: Int!): FolloweeList!
	notifications(page: Int!, size: Int!): NotificationList!
	login(loginInput: LoginInput!): LoginResponse!
	reissue: ReissueAccessTokenResponse!
	scheduleCategories(sort: ScheduleCategorySort!, page: Int!, size: Int!): ScheduleCategoryList!
    sendAuthKey(email: String!): String!
    validAuthKey(validAuthKeyInput: ValidAuthKeyInput!): Boolean!
	# TODO 추후 date 인자를 받아야 함
	scheduleStickerSummary(scheduleId: ID!):ScheduleStickerSummary!
	searchUsers(searchQuery: String, job: String, interest: String, sort: SearchUserSort): SearchUserList!
}

type Weekand {
	hello: String!
}

type PaginationInfo {
	hasNext: Boolean!
}

enum ScheduleCategoryOpenType {
	ALL_OPEN
	FOLLOWER_OPEN
	CLOSED
}

type Schedule {
	id: ID!
	name: String!
	status: ScheduleStatus!
	category: ScheduleCategory!
	dateTimeStart: String!
	dateTimeEnd: String!
	stickerCount: Int!
	stickerNames: [ScheduleStickerName!]!
}

enum ScheduleStatus {
	COMPLETED
	UNCOMPLETED
	SKIP
}
